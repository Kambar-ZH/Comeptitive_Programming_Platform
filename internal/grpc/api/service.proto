syntax = "proto3";

option go_package = "example/api";
package api;

service UserRepository {
  rpc All(Pagination) returns (UserList);
  rpc ByEmail(UserRequestEmail) returns (User);
  rpc ByHandle(UserRequestHandle) returns(User);
  rpc Create(User) returns (User);
  rpc Update(User) returns (User);
  rpc Delete(UserRequestHandle) returns (Empty);
}

service SubmissionRepository {
  rpc All(Pagination) returns (SubmissionList);
  rpc ById(SubmissionRequestId) returns (Submission);
  rpc ByAuthorHandle(SubmissionRequestHandle) returns (Submission);
  rpc Create(Submission) returns (Submission);
  rpc Update(Submission) returns (Submission);
  rpc Delete(SubmissionRequestId) returns (Empty);
}

service RegistrationService {
  rpc Validate(User) returns (Empty);
  rpc Sanitize(User) returns (Empty);
  rpc ComparePassword(User) returns (ComparePasswordResponse);
  rpc BeforeCreate(User) returns (Empty);
  rpc EncryptString(UnencryptedPassword) returns (EncryptedPassword);
}

message UnencryptedPassword {
  string password = 1;
}

message EncryptedPassword {
  string password = 1;
}

message ComparePasswordResponse {
  bool isEqual = 1;
}

message Empty {}

enum PHASE {
  BEFORE = 0;
  CODING = 1;
  PENDING_SYSTEM_TEST = 2;
  SYSTEM_TEST = 3;
  FINISHED = 4;
}

message Contest {
  int32 id = 1;
  PHASE phase = 2;
  string startTime = 3;
  string duration = 4;
}

message UserList {
  repeated User users = 1;
}

message UserRequestEmail {
  string email = 1;
}

message UserRequestHandle {
  string handle = 1;
}

message User {
  string handle = 1;
  string email = 2;
  string country = 3;
  string city = 4;
  int32 rating = 5;
  int32 maxRating = 6;
  string avatar = 7;
  string password = 8;
  string encryptedPassword = 9;
}

message Pagination {
  int32 page = 1;
  int32 limit = 2;
}

message SubmissionList {
  repeated Submission submissions = 1;
}

message SubmissionRequestId {
  int32 id = 1;
}

message SubmissionRequestHandle {
  string handle = 1;
}

enum VERDICT {
  PASSED = 0;
  FAILED = 1;
  COMPILATION_ERROR = 2;
  TIME_LIMIT_ERROR = 3;
  UNKNOWN_ERROR = 4;
}

message SubmissionResult {
  VERDICT verdict = 1;
  int32 failedTest = 2;
}

message Submission {  
  int32 id = 1;
  int32 contestId = 2;
  string date = 3;
  string authorHandle = 4;
  int32 problemId = 5;
  SubmissionResult submissionResult = 6;
}