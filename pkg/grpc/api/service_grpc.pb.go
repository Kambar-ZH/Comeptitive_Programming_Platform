// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubmissionRepositoryClient is the client API for SubmissionRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmissionRepositoryClient interface {
	All(ctx context.Context, in *AllSubmissionsRequest, opts ...grpc.CallOption) (*SubmissionList, error)
	ById(ctx context.Context, in *SubmissionByIdRequest, opts ...grpc.CallOption) (*Submission, error)
	ByAuthorHandle(ctx context.Context, in *SubmissionByHandleRequest, opts ...grpc.CallOption) (*Submission, error)
	Create(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*Submission, error)
	Update(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*Submission, error)
	Delete(ctx context.Context, in *DeleteSubmissionRequest, opts ...grpc.CallOption) (*Empty, error)
}

type submissionRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmissionRepositoryClient(cc grpc.ClientConnInterface) SubmissionRepositoryClient {
	return &submissionRepositoryClient{cc}
}

func (c *submissionRepositoryClient) All(ctx context.Context, in *AllSubmissionsRequest, opts ...grpc.CallOption) (*SubmissionList, error) {
	out := new(SubmissionList)
	err := c.cc.Invoke(ctx, "/api.SubmissionRepository/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionRepositoryClient) ById(ctx context.Context, in *SubmissionByIdRequest, opts ...grpc.CallOption) (*Submission, error) {
	out := new(Submission)
	err := c.cc.Invoke(ctx, "/api.SubmissionRepository/ById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionRepositoryClient) ByAuthorHandle(ctx context.Context, in *SubmissionByHandleRequest, opts ...grpc.CallOption) (*Submission, error) {
	out := new(Submission)
	err := c.cc.Invoke(ctx, "/api.SubmissionRepository/ByAuthorHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionRepositoryClient) Create(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*Submission, error) {
	out := new(Submission)
	err := c.cc.Invoke(ctx, "/api.SubmissionRepository/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionRepositoryClient) Update(ctx context.Context, in *Submission, opts ...grpc.CallOption) (*Submission, error) {
	out := new(Submission)
	err := c.cc.Invoke(ctx, "/api.SubmissionRepository/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionRepositoryClient) Delete(ctx context.Context, in *DeleteSubmissionRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.SubmissionRepository/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmissionRepositoryServer is the server API for SubmissionRepository service.
// All implementations must embed UnimplementedSubmissionRepositoryServer
// for forward compatibility
type SubmissionRepositoryServer interface {
	All(context.Context, *AllSubmissionsRequest) (*SubmissionList, error)
	ById(context.Context, *SubmissionByIdRequest) (*Submission, error)
	ByAuthorHandle(context.Context, *SubmissionByHandleRequest) (*Submission, error)
	Create(context.Context, *Submission) (*Submission, error)
	Update(context.Context, *Submission) (*Submission, error)
	Delete(context.Context, *DeleteSubmissionRequest) (*Empty, error)
	mustEmbedUnimplementedSubmissionRepositoryServer()
}

// UnimplementedSubmissionRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedSubmissionRepositoryServer struct {
}

func (UnimplementedSubmissionRepositoryServer) All(context.Context, *AllSubmissionsRequest) (*SubmissionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedSubmissionRepositoryServer) ById(context.Context, *SubmissionByIdRequest) (*Submission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ById not implemented")
}
func (UnimplementedSubmissionRepositoryServer) ByAuthorHandle(context.Context, *SubmissionByHandleRequest) (*Submission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByAuthorHandle not implemented")
}
func (UnimplementedSubmissionRepositoryServer) Create(context.Context, *Submission) (*Submission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSubmissionRepositoryServer) Update(context.Context, *Submission) (*Submission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedSubmissionRepositoryServer) Delete(context.Context, *DeleteSubmissionRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSubmissionRepositoryServer) mustEmbedUnimplementedSubmissionRepositoryServer() {}

// UnsafeSubmissionRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmissionRepositoryServer will
// result in compilation errors.
type UnsafeSubmissionRepositoryServer interface {
	mustEmbedUnimplementedSubmissionRepositoryServer()
}

func RegisterSubmissionRepositoryServer(s grpc.ServiceRegistrar, srv SubmissionRepositoryServer) {
	s.RegisterService(&SubmissionRepository_ServiceDesc, srv)
}

func _SubmissionRepository_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllSubmissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionRepositoryServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SubmissionRepository/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionRepositoryServer).All(ctx, req.(*AllSubmissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionRepository_ById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmissionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionRepositoryServer).ById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SubmissionRepository/ById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionRepositoryServer).ById(ctx, req.(*SubmissionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionRepository_ByAuthorHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmissionByHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionRepositoryServer).ByAuthorHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SubmissionRepository/ByAuthorHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionRepositoryServer).ByAuthorHandle(ctx, req.(*SubmissionByHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionRepository_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Submission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionRepositoryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SubmissionRepository/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionRepositoryServer).Create(ctx, req.(*Submission))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionRepository_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Submission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionRepositoryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SubmissionRepository/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionRepositoryServer).Update(ctx, req.(*Submission))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionRepository_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionRepositoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.SubmissionRepository/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionRepositoryServer).Delete(ctx, req.(*DeleteSubmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubmissionRepository_ServiceDesc is the grpc.ServiceDesc for SubmissionRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmissionRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SubmissionRepository",
	HandlerType: (*SubmissionRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _SubmissionRepository_All_Handler,
		},
		{
			MethodName: "ById",
			Handler:    _SubmissionRepository_ById_Handler,
		},
		{
			MethodName: "ByAuthorHandle",
			Handler:    _SubmissionRepository_ByAuthorHandle_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SubmissionRepository_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _SubmissionRepository_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SubmissionRepository_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/api/service.proto",
}

// RegistrationServiceClient is the client API for RegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistrationServiceClient interface {
	Validate(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	Sanitize(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	ComparePassword(ctx context.Context, in *User, opts ...grpc.CallOption) (*ComparePasswordResponse, error)
	BeforeCreate(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	EncryptPassword(ctx context.Context, in *EncryptPasswordRequest, opts ...grpc.CallOption) (*EncryptPasswordResponse, error)
}

type registrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationServiceClient(cc grpc.ClientConnInterface) RegistrationServiceClient {
	return &registrationServiceClient{cc}
}

func (c *registrationServiceClient) Validate(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.RegistrationService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationServiceClient) Sanitize(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.RegistrationService/Sanitize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationServiceClient) ComparePassword(ctx context.Context, in *User, opts ...grpc.CallOption) (*ComparePasswordResponse, error) {
	out := new(ComparePasswordResponse)
	err := c.cc.Invoke(ctx, "/api.RegistrationService/ComparePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationServiceClient) BeforeCreate(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.RegistrationService/BeforeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationServiceClient) EncryptPassword(ctx context.Context, in *EncryptPasswordRequest, opts ...grpc.CallOption) (*EncryptPasswordResponse, error) {
	out := new(EncryptPasswordResponse)
	err := c.cc.Invoke(ctx, "/api.RegistrationService/EncryptPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServiceServer is the server API for RegistrationService service.
// All implementations must embed UnimplementedRegistrationServiceServer
// for forward compatibility
type RegistrationServiceServer interface {
	Validate(context.Context, *User) (*Empty, error)
	Sanitize(context.Context, *User) (*Empty, error)
	ComparePassword(context.Context, *User) (*ComparePasswordResponse, error)
	BeforeCreate(context.Context, *User) (*Empty, error)
	EncryptPassword(context.Context, *EncryptPasswordRequest) (*EncryptPasswordResponse, error)
	mustEmbedUnimplementedRegistrationServiceServer()
}

// UnimplementedRegistrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegistrationServiceServer struct {
}

func (UnimplementedRegistrationServiceServer) Validate(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedRegistrationServiceServer) Sanitize(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sanitize not implemented")
}
func (UnimplementedRegistrationServiceServer) ComparePassword(context.Context, *User) (*ComparePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComparePassword not implemented")
}
func (UnimplementedRegistrationServiceServer) BeforeCreate(context.Context, *User) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeforeCreate not implemented")
}
func (UnimplementedRegistrationServiceServer) EncryptPassword(context.Context, *EncryptPasswordRequest) (*EncryptPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncryptPassword not implemented")
}
func (UnimplementedRegistrationServiceServer) mustEmbedUnimplementedRegistrationServiceServer() {}

// UnsafeRegistrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrationServiceServer will
// result in compilation errors.
type UnsafeRegistrationServiceServer interface {
	mustEmbedUnimplementedRegistrationServiceServer()
}

func RegisterRegistrationServiceServer(s grpc.ServiceRegistrar, srv RegistrationServiceServer) {
	s.RegisterService(&RegistrationService_ServiceDesc, srv)
}

func _RegistrationService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RegistrationService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServiceServer).Validate(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationService_Sanitize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServiceServer).Sanitize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RegistrationService/Sanitize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServiceServer).Sanitize(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationService_ComparePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServiceServer).ComparePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RegistrationService/ComparePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServiceServer).ComparePassword(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationService_BeforeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServiceServer).BeforeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RegistrationService/BeforeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServiceServer).BeforeCreate(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationService_EncryptPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServiceServer).EncryptPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.RegistrationService/EncryptPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServiceServer).EncryptPassword(ctx, req.(*EncryptPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistrationService_ServiceDesc is the grpc.ServiceDesc for RegistrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RegistrationService",
	HandlerType: (*RegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _RegistrationService_Validate_Handler,
		},
		{
			MethodName: "Sanitize",
			Handler:    _RegistrationService_Sanitize_Handler,
		},
		{
			MethodName: "ComparePassword",
			Handler:    _RegistrationService_ComparePassword_Handler,
		},
		{
			MethodName: "BeforeCreate",
			Handler:    _RegistrationService_BeforeCreate_Handler,
		},
		{
			MethodName: "EncryptPassword",
			Handler:    _RegistrationService_EncryptPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/api/service.proto",
}

// UserRepositoryClient is the client API for UserRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserRepositoryClient interface {
	All(ctx context.Context, in *AllUserRequest, opts ...grpc.CallOption) (*UserList, error)
	ByEmail(ctx context.Context, in *UserByEmailRequest, opts ...grpc.CallOption) (*User, error)
	ByHandle(ctx context.Context, in *UserByHandleRequest, opts ...grpc.CallOption) (*User, error)
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*Empty, error)
}

type userRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewUserRepositoryClient(cc grpc.ClientConnInterface) UserRepositoryClient {
	return &userRepositoryClient{cc}
}

func (c *userRepositoryClient) All(ctx context.Context, in *AllUserRequest, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := c.cc.Invoke(ctx, "/api.UserRepository/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepositoryClient) ByEmail(ctx context.Context, in *UserByEmailRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.UserRepository/ByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepositoryClient) ByHandle(ctx context.Context, in *UserByHandleRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.UserRepository/ByHandle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepositoryClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.UserRepository/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepositoryClient) Update(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.UserRepository/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRepositoryClient) Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.UserRepository/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRepositoryServer is the server API for UserRepository service.
// All implementations must embed UnimplementedUserRepositoryServer
// for forward compatibility
type UserRepositoryServer interface {
	All(context.Context, *AllUserRequest) (*UserList, error)
	ByEmail(context.Context, *UserByEmailRequest) (*User, error)
	ByHandle(context.Context, *UserByHandleRequest) (*User, error)
	Create(context.Context, *User) (*User, error)
	Update(context.Context, *User) (*User, error)
	Delete(context.Context, *DeleteUserRequest) (*Empty, error)
	mustEmbedUnimplementedUserRepositoryServer()
}

// UnimplementedUserRepositoryServer must be embedded to have forward compatible implementations.
type UnimplementedUserRepositoryServer struct {
}

func (UnimplementedUserRepositoryServer) All(context.Context, *AllUserRequest) (*UserList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedUserRepositoryServer) ByEmail(context.Context, *UserByEmailRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByEmail not implemented")
}
func (UnimplementedUserRepositoryServer) ByHandle(context.Context, *UserByHandleRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByHandle not implemented")
}
func (UnimplementedUserRepositoryServer) Create(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserRepositoryServer) Update(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserRepositoryServer) Delete(context.Context, *DeleteUserRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserRepositoryServer) mustEmbedUnimplementedUserRepositoryServer() {}

// UnsafeUserRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserRepositoryServer will
// result in compilation errors.
type UnsafeUserRepositoryServer interface {
	mustEmbedUnimplementedUserRepositoryServer()
}

func RegisterUserRepositoryServer(s grpc.ServiceRegistrar, srv UserRepositoryServer) {
	s.RegisterService(&UserRepository_ServiceDesc, srv)
}

func _UserRepository_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserRepository/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryServer).All(ctx, req.(*AllUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepository_ByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryServer).ByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserRepository/ByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryServer).ByEmail(ctx, req.(*UserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepository_ByHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserByHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryServer).ByHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserRepository/ByHandle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryServer).ByHandle(ctx, req.(*UserByHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepository_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserRepository/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepository_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserRepository/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryServer).Update(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRepository_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRepositoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserRepository/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRepositoryServer).Delete(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserRepository_ServiceDesc is the grpc.ServiceDesc for UserRepository service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserRepository",
	HandlerType: (*UserRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "All",
			Handler:    _UserRepository_All_Handler,
		},
		{
			MethodName: "ByEmail",
			Handler:    _UserRepository_ByEmail_Handler,
		},
		{
			MethodName: "ByHandle",
			Handler:    _UserRepository_ByHandle_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UserRepository_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserRepository_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserRepository_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/api/service.proto",
}
